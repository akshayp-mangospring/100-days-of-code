Rails runs on a hell lot of good engineering principles and conventions. Although some things might seem cheesy in Rails. But I have to work in Rails regardless.
Rails runs by default on MVC architecture.

So lets get a few basic Rails things cleared out of our head. This is my understanding of the Rails framework so far:

Model - Supposed to maintain the entities in the DB, generally a model has got a DB table associated with it. When we use a model with Active Record what it does is that it converts a DB Table object into a Rails object which is easy to interact with.

Controller - Each model has got only one controller associated with it. It's supposed to manage the data flow between model & view. It also maintains the actions which are going to be fired on each route. Rails is kind of intuitive in this. Meaning if there's a route called `index` for a model, then in it's controller implicitly the action(it's nothing but a function which will get fired on a specific route) `index` will be fired. It's in the controllers where we get to define the `@instance` variables.

View - Supposed to manage what is shown to the user: the HTML. This can have util funcs written in helpers for the specific models. Rails is kind of intuitive in this as well. A template is supposed to be in place for the corresponding action, which means, if there's an action called as `index` in a controller then there must exist a file called `index.html.erb` in the views folder for that controller. Since it'll get called implicitly whenever that action is hit. Each action has got only one template associated with it. Since such templates aren't everything there is to Rails, we can even create partials or helpers to maintain, share our view code.

Helpers - Are the funcs written in Rails to remove logic from a template and maintain it in a separate file since Rails views aren't supposed to have much logic in them. By definition the Rails files are supposed to have their logic written in Models - all the queries, Controllers - all the data passing logic.

ActiveRecord - This is the thing which keeps Rails running which is basically an Object-Relational-Mapper(ORM). What it does is it converts DB Tables and all it's associations in Ruby objects which are so much easier to access than direct DB rows. Although these can give a performance hit when we are dealing with large amounts of data since the conversion of DB rows to Ruby objects and all of it's associations is costly, we need to resort to pure SQL when in such scenarios.

Routes file - This is the file in which we maintain all the publicly accessible routes. We can also specify which action from which controller will get fired on which route in this file itself.

Migrations - These files are the changes which we propose to our DB. In such files we define associations which we are going to have across multiple tables. Even if we specify the associations in these files we need to go explicitly in each of the models to specify the associations there as well, otherwise ActiveRecord will not recognize these associations.

CRUD ops - These are the basic Create, Read, Update, Delete ops which are performed on any entity/model. These ops must be developed for each entity.

Gems - These are dependencies which we make our Rails app run through.

Scopes - These are somewhat like class methods, we can run those without an instance, they generally have values like a lambda function.

ActiveStorage - We can store our files/data locally using this. But we can point to S3 when we deploy on prod.

Rake Tasks - ?

In MVC Scenario:
All `GET` routes returns us a template with instance variables specified in the controller action.
All `POST/PATCH/PUT/DELETE` routes wither redirects us to some another page or reloads the page or returns us data in json format/json format or a rails partial with JS/HTML in it. It even sends us status codes in return on the basis of which we can take necessary actions as callbacks on the Front end.

In REST Scenario:
Any route returns us data in json format which is far more lightweight than templates.

Rails Gotchas:
Rails has a hell lot of gotchas which aren't mentioned anywhere or are discussed in the developer community. Rails adds methods dynamically to a hell lot of things. For example: Enums! Who could have guessed that enums can dynamically add methods to Objects? Enums are supposed to maintain uniqueness and restrict any other values otehr than enum values but Rails adds methods to them!
Also, I encountered another gotcha with Rails at work, there was some ridiculous query with multiple joins in it, but when I was trying to access some columns from a joined table via an alias I was simply unable to access it with `object.joined_table_aliased_column`, but then a senior dev suggested me to do `object[:joined_table_aliased_column]` and it worked. Now I was totally dumbfounded by looking at and questioning, how could I have guessed that? It was for no particular reason because some aliases were working and some weren't. But anyways, I just moved on.

While working with Rails:
Make Rails console your best friend that you can turn to anytime when things aren't intuitive and you can't guess them and want to test things out quickly. It also provides a quick way to interact with the data in real time.

Each model name is accessible as a global variable throughout the app, so when we generate a model called Post. It'll create a file called `post.rb`, in it, it'll create a model called `Post` and then this model would be globally accessible in the App.

`@instance_variables` defined inside a controller action will be automatically accessible inside the corresponding template, helpers, partials.

When navigating associations through Rails we just need to look at the model files, just have a look at has_many, belongs_to, has_one, etc. somewhere mentioned in the file. One association is mentioned in at least 2 files but in different formats. Something like: Inside `blog.rb` we can spot `has_many :comments`, similarly inside `comment.rb` we can spot `belongs_to :post`. So this association is two way and mentioned in two files in different formats to establish the association between 2 models.

I need to know what is a lambda func, procs, blocks, need to wrap my head quickly around all these to pick up Rails quickly.

Rails 7 updates:
Rails 7 now provides the list of methods available on an object in the cmd while tyoing out the query itself, just like it's available in JS consoles. How cool is that! Also now they provide better formatting for the results returned from the Rails console.
We also have support for Rich Text in WYSIWYG through ActionText that can be installed in Rails with `rails action_text:install`.
In Rails 7 we have got something called as `importmaps` which let's us use advanced JS syntax without usage of NodeJS in browser, it's built with the support of ES Modules. We can also supposedly install npm packages with the help of cdns in rails, we can also download it with `--download` flag, it'll get downloaded in `vendor/javascript`. All we need to do is just pin it first in `importmap.rb` then import it in `application.js`. Seems, kind of a black box right now, but it'll get clear with practice and research.
Example to import and use `local-time` in our App.
Pin step(In terminal):
`./bin/importmap pin local-time`

Import step(Add this in `application.js`):
```
import LocalTime from "local-time";

LocalTime.start();
```
